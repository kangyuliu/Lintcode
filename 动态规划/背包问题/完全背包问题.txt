int backPacket(int m, vector<int> &A, vector<int> & V){
	
	int n=A.size();
	vector<vector<int> > dp(n+1, vector<int>(m+1,0));

	for(int i=1;i<=n;i++){
		for(int j=1;j<=m;j++){
			for(int k=0;k<=j/A[i-1];k++)
				if(j>=A[i-1])
					dp[i][j]=max(dp[i-1][j],dp[i-1][j-k*A[i-1]]+k*V[i-1]);
				else
					dp[i][j]=dp[i-1][j];
		}
	}
	return dp[n][m];
}


int backPacket(int m, vector<int> &A, vector<int> & V){

	int n=A.size();
	
	vector<vector<int> > dp(n+1, vector<int>(m+1,0));
	for(int i=1;i<=n;i++){
		for(int j=1;j<=m;j++){
			if(j>=A[i-1])
				dp[i][j]=max(dp[i-1][j], dp[i][j-A[i-1]]+V[i]);
			else
				dp[i][j]=dp[i-1][j];
		}
	}
	return dp[n][m];
}


int backPacket(int m, vector<int> &A, vector<int> & V){

	int n=A.size();
	vector<int> dp(m+1,0);
	
	for(int i=0;i<n;i++){
		for(int j=A[i];j<=m;j++){
			if(j>=A[i])
				dp[j]=max(dp[j],dp[j-A[i]]+V[i]);
			else
				dp[j]=dp[j];
		}
	}
	return dp[m];
}