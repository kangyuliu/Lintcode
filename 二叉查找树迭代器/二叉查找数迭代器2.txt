class BSTIterator{
public:
	BSTIterator(TreeNode* root){
		current = NULL;
		//持续插入左子树
		while(root){
			stk.push(root);
			root = root->left;
		}
	}

	bool hasNext(){
		return (stk.empty() ? false:true);	
	}
	
	TreeNode* next(){
		if(stk.empty())
			return NULL;
		TreeNode* top = stk.top();
		stk.pop();
		if(top->right){
			TreeNode* curNode = top->right;
			while(curNode){
				stk.push(curNode);
				curNode = curNode->left;
			}
		}
		return top;
	}

private:
	TreeNode* current;
	stack<TreeNode*> stk;
};